apply plugin: 'com.android.model.application'

model {
    android {
        compileSdkVersion = 24
        buildToolsVersion = '24.0.3'

//        sourceSets.main {
//            jniLibs.srcDir 'src/main/libs'
//        }

        defaultConfig {
            applicationId = 'com.example.hellojni'
            minSdkVersion.apiLevel = 4
            targetSdkVersion.apiLevel = 24
        }
        /*
         * native build settings: taking default for almost everything
         */
        ndk {
            moduleName = 'hello-jni'
//            ldLibs "log"  //实现 log
            ldLibs.add("log")
            toolchain = 'clang'
            CFlags.addAll(['-Wall'])
        }
        buildTypes {
            release {
                minifyEnabled = false
                proguardFiles.add(file('proguard-rules.txt'))
            }
        }
        productFlavors {
            // for detailed abiFilter descriptions, refer to "Supported ABIs" @
            // https://developer.android.com/ndk/guides/abis.html#sa
            create("arm") {
                ndk.abiFilters.add("armeabi")
            }
            create("arm7") {
                ndk.abiFilters.add("armeabi-v7a")
            }
            create("arm8") {
                ndk.abiFilters.add("arm64-v8a")
            }
            create("x86") {
                ndk.abiFilters.add("x86")
            }
            create("x86-64") {
                ndk.abiFilters.add("x86_64")
            }
            create("mips") {
                ndk.abiFilters.add("mips")
            }
            create("mips-64") {
                ndk.abiFilters.add("mips64")
            }
            // To include all cpu architectures, leaves abiFilters empty
            create("all")
        }

        dependencies {
            compile fileTree(dir: 'libs', include: ['*.jar'])
            compile rootProject.ext.supportV4
            //    testCompile 'junit:junit:4.12'
        }
    }


}